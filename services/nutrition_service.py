import httpx
import traceback
from config import SPOONACULAR_API

class NutritionService:
    def __init__(self):
        self.api_key = SPOONACULAR_API

    async def get_nutrition(self, ingredients: str) -> str:
        try:
            url = "https://api.spoonacular.com/recipes/parseIngredients"
            headers = {"Content-Type": "application/x-www-form-urlencoded"}
            params = {"apiKey": self.api_key}
            data = {
                "ingredientList": ingredients,  # —Ç—É—Ç –º–∞—î –±—É—Ç–∏ str –∑ \n —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–∞–º–∏
                "servings": 1,
                "includeNutrition": True,
                "language": "en"
            }

            async with httpx.AsyncClient(timeout=10.0) as client:
                try:
                    # üîß –¢–£–¢: –ø–µ—Ä–µ–¥–∞—î–º–æ `params=params` –∑ –∫–ª—é—á–µ–º API
                    response = await client.post(url, data=data, headers=headers, params=params)
                    response.raise_for_status()
                except httpx.RequestError as e:
                    return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ API: {e}"
                except httpx.HTTPStatusError as e:
                    return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API: {e.response.status_code} - {e.response.text}"

            items = response.json()

            if not items or not isinstance(items, list):
                return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–∂–∏–≤–Ω—ñ—Å—Ç—å."

            total_calories = 0
            lines = []

            for item in items:
                name = item.get("name", "–Ω–µ–≤—ñ–¥–æ–º–æ")
                nutrients = item.get("nutrition", {}).get("nutrients", [])
                calories = 0

                for nutrient in nutrients:
                    if nutrient.get("name", "").lower() == "calories":
                        calories = nutrient.get("amount", 0)
                        break

                total_calories += calories
                lines.append(f"{name}: {int(calories)} –∫–∫–∞–ª")

            return "\n".join(lines) + f"\n\nüî¢ –ó–∞–≥–∞–ª–æ–º: {int(total_calories)} –∫–∫–∞–ª"

        except Exception:
            error_details = traceback.format_exc()
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–∞—Ö—É–Ω–∫—É –∫–∞–ª–æ—Ä—ñ–π:\n{error_details}"
