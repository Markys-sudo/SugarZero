import os
import uuid
from telegram import Update
from telegram.ext import ContextTypes
from utils.util import send_text, send_text_buttons, load_prompt
from services.dialog import dialog
from services.gpt import chatgpt
from services.nutrition_service import NutritionService
from utils.logger import logger, log_user_action
from handlers.food_diary import add_diary_entry

nutrition = NutritionService()

async def photo_mode_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    dialog.set_mode(user_id, 'photo_mode')
    await send_text(update, context, "üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Å—Ç—Ä–∞–≤–∏, —è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—é —ó—ó —Ç–∞ –ø–æ—Ä–∞—Ö—É—é –∫–∞–ª–æ—Ä—ñ—ó.")


nutrition = NutritionService()

async def photo_mode_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    log_user_action(update, "üì∏ –ù–∞–¥—ñ—Å–ª–∞–≤(-–ª–∞) —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ
    photo = update.message.photo[-1]
    file_id = str(uuid.uuid4())
    file_path = f"temp/{file_id}.jpg"
    os.makedirs("temp", exist_ok=True)

    try:
        photo_file = await context.bot.get_file(photo.file_id)
        await photo_file.download_to_drive(file_path)
        logger.info(f"[{user_id}] –§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {file_path}")
        await send_text(update, context, "üß† –ê–Ω–∞–ª—ñ–∑—É—é —Ñ–æ—Ç–æ...")
    except Exception as e:
        logger.exception(f"[{user_id}] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ: {e}")
        await send_text(update, context, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    # GPT-–æ–ø–∏—Å
    description = await chatgpt.describe_image(file_path)
    logger.info(f"[{user_id}] –û–ø–∏—Å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {description}")
    await send_text(update, context, f"üìù –û–ø–∏—Å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:\n\n{description}")

    # GPT-—ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏
    prompt = load_prompt('food')
    ingredients_raw = await chatgpt.send_question(prompt, description)
    logger.info(f"[{user_id}] –°–ø–∏—Å–æ–∫ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ (GPT):\n{ingredients_raw}")
    await send_text(update, context, f"ü•¶ –Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:\n{ingredients_raw}")

    # –ö–æ—Ä–µ–∫—Ü—ñ—è –Ω–∞–∑–≤
    mapping = {
        "mashed potatoes": "boiled potatoes",
        "black pepper": "ground black pepper",
        "fried egg": "egg, fried",
        "scrambled eggs": "egg, scrambled",
        "boiled egg": "egg, boiled"
    }

    ingredients_list = [
        i.strip().strip("',\"").lower()
        for i in ingredients_raw.split("\n")
        if i.strip()
    ]
    corrected = [mapping.get(x, x) for x in ingredients_list]
    logger.info(f"[{user_id}] –í–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏: {corrected}")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ
    dialog.set_data(user_id, "last_ingredients", "\n".join(corrected))

    # –ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å
    nutrition_info = await nutrition.get_nutrition("\n".join(corrected), user_id=user_id)
    logger.info(f"[{user_id}] –ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å:\n{nutrition_info}")

    await send_text_buttons(update, context, f"üî• –ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å:\n{nutrition_info}", {
        "edit_ingredients": "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏",
        "add_to_diary": "‚ûï –î–æ–¥–∞—Ç–∏ –≤ —â–æ–¥–µ–Ω–Ω–∏–∫",
        "main_start": "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
    })

    try:
        os.remove(file_path)
        logger.info(f"[{user_id}] –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª {file_path} –≤–∏–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logger.warning(f"[{user_id}] –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª {file_path}: {e}")

async def handle_edit_ingredients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    dialog.set_mode(user_id, "edit_ingredients")
    log_user_action(update, "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤")
    await send_text(update, context, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –ø–æ —Ä—è–¥–∫—É.")

async def handle_edit_ingredients_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if dialog.get_mode(user_id) != "edit_ingredients":
        return

    text = update.message.text.strip()
    if not text:
        await send_text(update, context, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤.")
        return

    dialog.set_data(user_id, "last_ingredients", text)
    await send_text(update, context, "üîÑ –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—é –∫–∞–ª–æ—Ä—ñ—ó...")

    nutrition_info = await nutrition.get_nutrition(text, user_id=user_id)
    dialog.set_mode(user_id, "photo_mode")

    await send_text_buttons(update, context, f"üî• –ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å:\n{nutrition_info}", {
        "edit_ingredients": "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑",
        "add_to_diary": "‚ûï –î–æ–¥–∞—Ç–∏ –≤ —â–æ–¥–µ–Ω–Ω–∏–∫",
        "main_start": "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
    })

async def handle_add_to_diary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    txt = dialog.get_data(user_id, "last_ingredients")
    if not txt:
        await query.edit_message_text("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏–∫–∞.")
        return

    add_diary_entry(user_id, txt)
    await query.edit_message_text("‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞.")
