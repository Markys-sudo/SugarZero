# handlers/food_analysis.py
from services.dialog import dialog
import os
import uuid
from telegram import Update
from telegram.ext import ContextTypes
from utils.util import send_text
from services.gpt import chatgpt
from services.nutrition_service import NutritionService
from utils.logger import logger, log_user_action

async def photo_mode_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    dialog.set_mode(user_id, 'photo_mode')
    await send_text(update, context, "üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Å—Ç—Ä–∞–≤–∏, —è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—é —ó—ó —Ç–∞ –ø–æ—Ä–∞—Ö—É—é –∫–∞–ª–æ—Ä—ñ—ó.")


nutrition = NutritionService()

async def photo_mode_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    log_user_action(update, "üì∏ –ù–∞–¥—ñ—Å–ª–∞–≤(-–ª–∞) —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")

    photo = update.message.photo[-1]
    file_id = str(uuid.uuid4())
    file_path = f"temp/{file_id}.jpg"
    os.makedirs("temp", exist_ok=True)

    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ
        photo_file = await context.bot.get_file(photo.file_id)
        await photo_file.download_to_drive(file_path)
        logger.info(f"[{user_id}] –§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {file_path}")
        await send_text(update, context, "üß† –ê–Ω–∞–ª—ñ–∑—É—é —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ GPT...")
    except Exception as e:
        logger.exception(f"[{user_id}] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ: {e}")
        await send_text(update, context, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    # GPT –æ–ø–∏—Å
    description = await chatgpt.describe_image(file_path)
    logger.info(f"[{user_id}] –û–ø–∏—Å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {description}")
    await send_text(update, context, f"üìù –û–ø–∏—Å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:\n\n{description}")

    # GPT —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏
    prompt = (
        "–ù–∞ –æ—Å–Ω–æ–≤—ñ —Ü—å–æ–≥–æ –æ–ø–∏—Å—É —Å—Ç—Ä–∞–≤–∏ —Å—Ñ–æ—Ä–º—É–π —Å–ø–∏—Å–æ–∫ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é, "
        "–æ–¥–∏–Ω —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç –Ω–∞ —Ä—è–¥–æ–∫. –î–æ–¥–∞–π –ø—Ä–∏–±–ª–∏–∑–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å. –§–æ—Ä–º–∞—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —è–∫: "
        "'2 potatoes', '1 tsp ground black pepper', '1 tbsp olive oil'. "
        "–ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å, —Ç—ñ–ª—å–∫–∏ —Å–ø–∏—Å–æ–∫."
    )
    ingredients_raw = await chatgpt.send_question(prompt, description)
    logger.info(f"[{user_id}] –°–ø–∏—Å–æ–∫ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ (GPT):\n{ingredients_raw}")
    await send_text(update, context, f"ü•¶ –Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:\n{ingredients_raw}")

    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞–∑–≤
    ingredient_mapping = {
        "mashed potatoes": "boiled potatoes",
        "black pepper": "ground black pepper",
        "fried egg": "egg, fried",
        "scrambled eggs": "egg, scrambled",
        "boiled egg": "egg, boiled"
        # –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ
    }

    # –û–±—Ä–æ–±–∫–∞ —Ä—è–¥–∫—ñ–≤
    ingredients_list = [
        i.strip().strip("',\"").lower()
        for i in ingredients_raw.split("\n")
        if i.strip()
    ]
    corrected_ingredients = [
        ingredient_mapping.get(item, item) for item in ingredients_list
    ]
    logger.info(f"[{user_id}] –í–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏: {corrected_ingredients}")

    # –ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å
    nutrition_info = await nutrition.get_nutrition("\n".join(corrected_ingredients), user_id=user_id)
    logger.info(f"[{user_id}] –î–∞–Ω—ñ –ø–æ –∫–∞–ª–æ—Ä—ñ—è—Ö:\n{nutrition_info}")
    await send_text(update, context, f"üî• –ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å:\n{nutrition_info}")

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
    try:
        os.remove(file_path)
        logger.info(f"[{user_id}] –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª {file_path} –≤–∏–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logger.warning(f"[{user_id}] –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª {file_path}: {e}")