from utils.util import load_prompt, load_message, send_text, send_text_buttons, send_photo
from utils.logger import log_user_action, logger
from database.db import add_quiz_top, get_user_rank
from services.dialog import dialog
from services.gpt import chatgpt

class QuizHandler:
    def __init__(self, chatgpt, dialog, logger):
        self.chatgpt = chatgpt
        self.dialog = dialog
        self.logger = logger

    async def start(self, update, context):
        self.dialog.mode = 'quiz'
        context.user_data['quiz_score'] = 0
        await send_photo(update, context, 'quiz')
        msg = load_message('quiz')
        await send_text_buttons(update, context, msg, {
            'quiz_science': '–ù–∞—É–∫–∞ —ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó',
            'quiz_world': '–°–≤—ñ—Ç –Ω–∞–≤–∫–æ–ª–æ –Ω–∞—Å',
            'quiz_culture': '–ö—É–ª—å—Ç—É—Ä–∞ —Ç–∞ –º–∏—Å—Ç–µ—Ü—Ç–≤–æ',
            'quiz_history': '–Ü—Å—Ç–æ—Ä—ñ—è —Ç–∞ —Å—É—á–∞—Å–Ω—ñ—Å—Ç—å',
        })

    async def handle_button(self, update, context):
        callback = update.callback_query
        query_data = callback.data
        user = callback.from_user
        user_id = user.id

        self.dialog.mode = 'quiz'

        await callback.answer()  # –∑–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback_query

        log_user_action(update, f"–Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É: {query_data}")

        if query_data == 'quiz_end':
            score = context.user_data.get('quiz_score', 0)
            add_quiz_top(user, score)
            rank, total = get_user_rank(user.id)
            self.logger.info(f"[{user_id}] –ó–∞–≤–µ—Ä—à–∏–≤ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É. –†–µ–∑—É–ª—å—Ç–∞—Ç: {score}, –º—ñ—Å—Ü–µ: {rank}/{total}")
            msg = (
                f"üèÅ –í—ñ–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n"
                f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.\n"
                f"üìä –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {rank}-–µ –º—ñ—Å—Ü–µ –∑ {total} —É—á–∞—Å–Ω–∏–∫—ñ–≤."
            )
            await send_text(update, context, msg)
            return

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—á–µ—Ä–µ–∑ send_photo)
        try:
            await send_photo(update, context, query_data)
        except FileNotFoundError:
            await send_text(update, context, "‚ö†Ô∏è –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        await send_text(update, context, 'üéØ –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é. –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∑–∞–ø–∏—Ç–∞–Ω—å!')

        prompt = load_prompt(query_data)
        context.user_data['quiz_prompt'] = prompt
        context.user_data['quiz_score'] = 0

        await self.ask_new_question(update, context, prompt)

    async def ask_new_question(self, update, context, prompt):
        await send_text(update, context, "‚ùì –ü–∏—Ç–∞–Ω–Ω—è –≥–æ—Ç—É—î—Ç—å—Å—è...")

        raw_question = await self.chatgpt.send_question(
            prompt,
            "–ó–≥–µ–Ω–µ—Ä—É–π –æ–¥–Ω–µ –∫–æ—Ä–æ—Ç–∫–µ –ø–∏—Ç–∞–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –∑ 4 –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ —á—ñ—Ç–∫–æ –∑–∞–∑–Ω–∞—á –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –§–æ—Ä–º–∞—Ç –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π:\n"
            "–ü–∏—Ç–∞–Ω–Ω—è: ...\n–ê) ...\n–ë) ...\n–í) ...\n–ì) ...\n–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <–ª–∏—à–µ –æ–¥–Ω–∞ –ª—ñ—Ç–µ—Ä–∞ –ê/–ë/–í/–ì>"
        )

        parsed = self._parse_question(raw_question)

        if not parsed['question'] or len(parsed['options']) != 4 or not parsed['correct']:
            await send_text(update, context,
                            "‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–∏—Ç–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.")
            await self.start(update, context)
            return

        context.user_data['quiz_correct'] = parsed['correct']
        await send_text_buttons(update, context, parsed['question'], {
            **parsed['options'],
            'quiz_end': 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏'
        })

    async def handle_answer(self, update, context):
        callback = update.callback_query
        answer = callback.data
        correct = context.user_data.get('quiz_correct')
        user_id = callback.from_user.id

        await callback.answer()

        if not correct:
            self.logger.warning(f"[{user_id}] –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
            await send_text(update, context, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        if answer == correct:
            context.user_data['quiz_score'] += 1
            self.logger.info(f"[{user_id}] ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–≤: {answer}")
            await send_text(update, context, "‚úÖ –í—ñ—Ä–Ω–æ!")
        else:
            correct_letter = correct[-1]
            self.logger.info(f"[{user_id}] ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –û–±—Ä–∞–≤: {answer}, –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {correct}")
            await send_text(update, context, f"‚ùå –ù–µ–≤—ñ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_letter}")

        await send_text(update, context, "üìö –ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –≥–æ—Ç—É—î—Ç—å—Å—è...")

        prompt = context.user_data.get('quiz_prompt')
        if not prompt:
            await send_text(update, context, "‚ö†Ô∏è –ù–µ –æ–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /quiz –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
            return

        await self.ask_new_question(update, context, prompt)

    def _parse_question(self, text: str) -> dict:
        lines = [line.strip() for line in text.strip().split('\n') if line.strip()]
        result = {
            'question': '',
            'options': {},
            'correct': ''
        }

        option_map = {'–ê': 'quiz_A', '–ë': 'quiz_B', '–í': 'quiz_C', '–ì': 'quiz_D'}

        for line in lines:
            if line.lower().startswith("–ø–∏—Ç–∞–Ω–Ω—è:"):
                result['question'] = line.partition(':')[2].strip()
            elif any(line.startswith(f"{k})") for k in option_map):
                prefix = line[0]
                key = option_map.get(prefix)
                result['options'][key] = line[2:].strip()
            elif "–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å" in line.lower():
                letter = line.strip()[-1].upper()
                result['correct'] = option_map.get(letter, '')

        if not result['question'] or len(result['options']) != 4 or not result['correct']:
            return {'question': '', 'options': {}, 'correct': ''}

        return result

quiz_handler = QuizHandler(chatgpt=chatgpt, dialog=dialog, logger=logger)
# –ö–æ–º–∞–Ω–¥–∞ /quiz
async def handle_quiz_command(update, context):
    await quiz_handler.start(update, context)

# –ö–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
async def handle_quiz_button(update, context):
    await quiz_handler.handle_button(update, context)

# –ö–Ω–æ–ø–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (–ê/–ë/–í/–ì)
async def handle_quiz_answer(update, context):
    await quiz_handler.handle_answer(update, context)
