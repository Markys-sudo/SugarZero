from services.dialog import dialog
from services.gpt import chatgpt
from utils.util import load_prompt, load_message, send_text_buttons, send_text, send_photo
from utils.logger import log_user_action, gpt_logger
from handlers.main_menu import start
from database.db import save_user, add_favorite, get_favorites  # —Ç–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó

class ReceptHandler:
    def __init__(self, dialog):
        self.dialog = dialog
        self.mode = 'recept'

    async def handle_command(self, update, context):
        user = update.effective_user
        save_user(user)
        self.dialog.set_mode(user.id, self.mode)

        await send_photo(update, context, 'recept')
        msg = load_message('recept')
        await send_text(update, context, msg)

    async def handle_dialog(self, update, context):
        if self.dialog.get_mode(update.effective_user.id) != self.mode:
            return

        text = update.message.text if update.message and update.message.text else ''
        if not text:
            return

        context.user_data['ingredients'] = text
        chatgpt.message_list.clear()

        gpt_logger.info(f"[{update.effective_user.id}] GPT: {text}")
        try:
            prompt_template = load_prompt('recept')
            prompt = prompt_template.format(ingredients=text)
            chatgpt.set_prompt(prompt)
            answer = await chatgpt.send_message_list()

            await send_text_buttons(update, context, answer, {
                "recept_next": '–©–µ —Ä–µ—Ü–µ–ø—Ç–∏',
                "recept_save": 'üìå –î–æ–¥–∞—Ç–∏ –≤ –æ–±—Ä–∞–Ω–µ',
                "recept_favorites": 'üç¥ –ú–æ—ó –æ–±—Ä–∞–Ω—ñ —Ä–µ—Ü–µ–ø—Ç–∏',
                "recept_end": '–ó–∞–∫—ñ–Ω—á–∏—Ç–∏'
            })
        except Exception as e:
            await send_text(update, context, f"‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ GPT: {e}")

    async def handle_button(self, update, context):
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        log_user_action(update, f"–Ω–∞—Ç–∏—Å–Ω—É–≤: {query.data}")

        if query.data == 'recept_next':
            ingredients = context.user_data.get('ingredients', '')
            prompt = load_prompt('recept').format(ingredients=ingredients)
            chatgpt.set_prompt(prompt)
            answer = await chatgpt.send_message_list()
            await send_text_buttons(update, context, answer, {
                "recept_next": '–©–µ —Ä–µ—Ü–µ–ø—Ç–∏',
                "recept_save": 'üìå –î–æ–¥–∞—Ç–∏ –≤ –æ–±—Ä–∞–Ω–µ',
                "recept_favorites": 'üç¥ –ú–æ—ó –æ–±—Ä–∞–Ω—ñ —Ä–µ—Ü–µ–ø—Ç–∏',
                "recept_end": '–ó–∞–∫—ñ–Ω—á–∏—Ç–∏'
            })

        elif query.data == 'recept_save':
            recipe_text = query.message.text
            add_favorite(user_id, recipe_text)
            await send_text(update, context, "‚úÖ –†–µ—Ü–µ–ø—Ç –¥–æ–¥–∞–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–æ–≥–æ!")

        elif query.data == 'recept_favorites':
            favs = get_favorites(user_id)
            if not favs:
                await send_text(update, context, "üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ä–µ—Ü–µ–ø—Ç—ñ–≤.")
            else:
                await send_text(update, context, "üìö –í–∞—à—ñ —É–ª—é–±–ª–µ–Ω—ñ —Ä–µ—Ü–µ–ø—Ç–∏:")
                for recipe in favs:
                    await send_text(update, context, recipe)

        elif query.data == 'recept_end':
            self.dialog.set_mode(user_id, 'main')
            await start(update, context)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
recept_handler = ReceptHandler(dialog)

# –•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
async def recept(update, context):
    await recept_handler.handle_command(update, context)

async def recept_dialog(update, context):
    await recept_handler.handle_dialog(update, context)

async def button_recept(update, context):
    await recept_handler.handle_button(update, context)
