# handlers/food_diary.py
from services.nutrition_service import NutritionService
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from utils.util import send_text_buttons_edit, send_text
from services.dialog import dialog
from database.food_diary_db import add_diary_entry, get_diary_entries, clear_diary
from utils.logger import log_user_action, dialog_logger


async def food_diary_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    dialog.set_mode(user_id, "food_diary")
    dialog_logger.info(f"[{user_id}] –†–µ–∂–∏–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: food_diary")
    log_user_action(update, "–í—ñ–¥–∫—Ä–∏–≤ –©–æ–¥–µ–Ω–Ω–∏–∫ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è")
    await send_text_buttons_edit(update, context, "üìò –©–æ–¥–µ–Ω–Ω–∏–∫ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è ‚Äî –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", {
        "add_food_entry": "‚ûï –î–æ–¥–∞—Ç–∏ —Å—Ç—Ä–∞–≤—É",
        "view_food_diary": "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ",
        #"calc_food_diary": "üßÆ –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó",
        "clear_food_diary": "üóë –û—á–∏—Å—Ç–∏—Ç–∏",
        "main_start": "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
    })


async def handle_diary_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data
    log_user_action(update, f"–ù–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É: {data}")
    mode = dialog.get_mode(user_id)
    dialog_logger.debug(f"[{user_id}] –ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º: {mode}")
    log_user_action(update, f"–ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º: {mode}")

    # if data == "add_food_entry":
    #     dialog.set_mode(user_id, "adding_food_entry")
    #     dialog_logger.info(f"[{user_id}] –†–µ–∂–∏–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: adding_food_entry")
    #     await send_text_buttons_edit(update, context,
    #         "üìù –í–≤–µ–¥—ñ—Ç—å —Å—Ç—Ä–∞–≤—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `2 eggs`):",
    #         {"food_diary": "üîô –ù–∞–∑–∞–¥ –¥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞"}
    #     )
    # elif data == "view_food_diary":
    #     entries = get_diary_entries(user_id)
    #     text = "üìã –°—å–æ–≥–æ–¥–Ω—ñ:\n\n" + "\n".join(f" {e}" for e in entries) if entries else "üì≠ –©–æ–¥–µ–Ω–Ω–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π."
    #     await send_text_buttons_edit(update, context, text, {
    #         "food_diary": "üîô –ù–∞–∑–∞–¥ –¥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞"
    #     })
    if data == "add_food_entry":
        dialog.set_mode(user_id, "adding_food_entry")
        dialog_logger.info(f"[{user_id}] –†–µ–∂–∏–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: adding_food_entry")

        text = (
            "üìù –í–≤–µ–¥—ñ—Ç—å —Å—Ç—Ä–∞–≤—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –∑ –ø—Ä–∏–±–ª–∏–∑–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é:\n\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            "2 boiled eggs\n"
            "100g fried chicken\n"
            "1 tbsp olive oil\n\n"
            "–ú–æ–∂–Ω–∞ –≤–≤–µ—Å—Ç–∏ –æ–¥–Ω—É –∞–±–æ –∫—ñ–ª—å–∫–∞ –ø–æ–∑–∏—Ü—ñ–π (–∫–æ–∂–Ω–∞ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞)."
        )

        await send_text_buttons_edit(update, context, text, {
            "food_diary": "üîô –ù–∞–∑–∞–¥ –¥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞"
        })

    elif data == "view_food_diary":
        entries = get_diary_entries(user_id)

        if not entries:
            await send_text_buttons_edit(update, context, "üì≠ –©–æ–¥–µ–Ω–Ω–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", {
                "food_diary": "üîô –ù–∞–∑–∞–¥ –¥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞"
            })
            return

        ingredients_text = "\n".join(entries)

        try:

            nutrition_service = NutritionService()
            summary = await nutrition_service.get_nutrition_summary(ingredients_text, user_id)
            # summary = (
            #         f"üìã –°—å–æ–≥–æ–¥–Ω—ñ:\n\n" + "\n".join(f"{e}" for e in entries) +
            #         f"\n\nüçΩ –£—Å—å–æ–≥–æ:\n"
            #         f"–ö–∞–ª–æ—Ä—ñ—ó: {nutrition['calories']} –∫–∫–∞–ª\n"
            #         f"–ë—ñ–ª–∫–∏: {nutrition['protein']} –≥\n"
            #         f"–ñ–∏—Ä–∏: {nutrition['fat']} –≥\n"
            #         f"–í—É–≥–ª–µ–≤–æ–¥–∏: {nutrition['carbs']} –≥"
            # )
        except Exception as e:

            dialog_logger.exception(f"[{user_id}] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω—É—Ç—Ä—ñ—î–Ω—Ç—ñ–≤: {e}")
            summary = (
                    f"üìã –°—å–æ–≥–æ–¥–Ω—ñ:\n\n" + "\n".join(f"{e}" for e in entries) +
                    f"\n\n‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—á–∏—Å–ª–∏—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó."
            )

        await send_text_buttons_edit(update, context, summary, {
            "food_diary": "üîô –ù–∞–∑–∞–¥ –¥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞"
        })
    elif data == "calc_food_diary":
        entries = get_diary_entries(user_id)
        if not entries:
            await send_text_buttons_edit(update, context, "üì≠ –©–æ–¥–µ–Ω–Ω–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", {
                "food_diary": "üîô –ù–∞–∑–∞–¥ –¥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞"
            })
            return

        try:
            ingredients_text = "\n".join(entries)
            nutrition_service = NutritionService()
            nutrition = await nutrition_service.get_nutrition_summary(ingredients_text,user_id)
            # nutrition = await nutrition_service.get_nutrition(ingredients_text)
            #
            # text = (
            #     f"üçΩ –ü—ñ–¥—Å—É–º–æ–∫ –ø–æ —â–æ–¥–µ–Ω–Ω–∏–∫—É:\n"
            #     f"–ö–∞–ª–æ—Ä—ñ—ó: {nutrition['calories']} –∫–∫–∞–ª\n"
            #     f"–ë—ñ–ª–∫–∏: {nutrition['protein']} –≥\n"
            #     f"–ñ–∏—Ä–∏: {nutrition['fat']} –≥\n"
            #     f"–í—É–≥–ª–µ–≤–æ–¥–∏: {nutrition['carbs']} –≥"
            # )
        except Exception as e:

            dialog_logger.exception(f"[{user_id}] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ –∫–∞–ª–æ—Ä—ñ–π: {e}")
            text = "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—á–∏—Å–ª–∏—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó."

        await send_text_buttons_edit(update, context, text, {
            "food_diary": "üîô –ù–∞–∑–∞–¥ –¥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞"
        })


    elif data == "clear_food_diary":
        clear_diary(user_id)
        log_user_action(update, "–û—á–∏—Å—Ç–∏–≤ —â–æ–¥–µ–Ω–Ω–∏–∫ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è")
        await send_text_buttons_edit(update, context,
            "üóë –©–æ–¥–µ–Ω–Ω–∏–∫ –æ—á–∏—â–µ–Ω–æ.",
            {"food_diary": "üîô –ù–∞–∑–∞–¥ –¥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞"}
        )

    elif data == "food_diary":
        await food_diary_start(update, context)

    elif data == "main_start":
        from handlers.main_menu import start
        dialog.set_mode(user_id, "main")
        log_user_action(update, "–ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        await start(update, context)


async def handle_food_entry_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    mode = dialog.get_mode(user_id)
    text = update.message.text.strip()

    dialog_logger.info(f"[{user_id}] –£ —Ä–µ–∂–∏–º—ñ '{mode}' –≤–≤—ñ–≤: {text}")

    if mode != "adding_food_entry":
        dialog_logger.debug(f"[{user_id}] –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–∑–∞ —Ä–µ–∂–∏–º–æ–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è ‚Äî —ñ–≥–Ω–æ—Ä—É—î—Ç—å—Å—è")
        return

    text = update.message.text.strip()
    if text:
        lines = [line.strip() for line in text.splitlines() if line.strip()]
        for line in lines:
            add_diary_entry(user_id, line)
            log_user_action(update, f"–î–æ–¥–∞–≤ –¥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞: {line}")

        await send_text(update, context, "‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞.")

    else:
        log_user_action(update, "–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞")
        await send_text(update, context, "‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—î ‚Äî —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    await food_diary_start(update, context)
